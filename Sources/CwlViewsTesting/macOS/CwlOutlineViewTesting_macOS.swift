//
//  CwlOutlineView_macOS.swift
//  CwlViews
//
//  Created by Matt Gallagher on 28/10/2015.
//  Copyright Â© 2015 Matt Gallagher ( https://www.cocoawithlove.com ). All rights reserved.
//
//  Permission to use, copy, modify, and/or distribute this software for any purpose with or without
//  fee is hereby granted, provided that the above copyright notice and this permission notice
//  appear in all copies.
//
//  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
//  SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
//  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
//  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
//  NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
//  OF THIS SOFTWARE.
//

#if os(macOS)

extension BindingParser where Downcast: OutlineViewBinding {
	// You can easily convert the `Binding` cases to `BindingParser` using the following Xcode-style regex:
	// Replace: case ([^\(]+)\((.+)\)$
	// With:    public static var $1: BindingParser<$2, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .$1(let x) = \$0 { return x } else { return nil } }, upcast: { \$0.asOutlineViewBinding() }) }
		
	//	0. Static bindings are applied at construction and are subsequently immutable.
	
	// 1. Value bindings may be applied at construction and may subsequently change.
	public static var allowsColumnReordering: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsColumnReordering(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var allowsColumnResizing: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsColumnResizing(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var allowsColumnSelection: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsColumnSelection(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var allowsEmptySelection: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsEmptySelection(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var allowsMultipleSelection: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsMultipleSelection(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var allowsTypeSelect: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .allowsTypeSelect(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var autoresizesOutlineColumn: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .autoresizesOutlineColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var autosaveExpandedItems: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .autosaveExpandedItems(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var autosaveName: BindingParser<Dynamic<NSTableView.AutosaveName?>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .autosaveName(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var autosaveTableColumns: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .autosaveTableColumns(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var backgroundColor: BindingParser<Dynamic<NSColor>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .backgroundColor(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var columnAutoresizingStyle: BindingParser<Dynamic<NSTableView.ColumnAutoresizingStyle>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .columnAutoresizingStyle(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var columns: BindingParser<Dynamic<[TableColumn<Downcast.NodeDataType>]>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .columns(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var cornerView: BindingParser<Dynamic<ViewConvertible?>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .cornerView(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var draggingDestinationFeedbackStyle: BindingParser<Dynamic<NSTableView.DraggingDestinationFeedbackStyle>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .draggingDestinationFeedbackStyle(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var floatsGroupRows: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .floatsGroupRows(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var gridColor: BindingParser<Dynamic<NSColor>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .gridColor(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var gridStyleMask: BindingParser<Dynamic<NSTableView.GridLineStyle>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .gridStyleMask(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var headerView: BindingParser<Dynamic<TableHeaderViewConvertible?>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .headerView(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indentationMarkerFollowsCell: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indentationMarkerFollowsCell(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indentationPerLevel: BindingParser<Dynamic<CGFloat>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indentationPerLevel(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var intercellSpacing: BindingParser<Dynamic<NSSize>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .intercellSpacing(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var outlineTableColumnIdentifier: BindingParser<Dynamic<NSUserInterfaceItemIdentifier>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .outlineTableColumnIdentifier(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var rowHeight: BindingParser<Dynamic<CGFloat>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .rowHeight(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var rowSizeStyle: BindingParser<Dynamic<NSTableView.RowSizeStyle>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .rowSizeStyle(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectionHighlightStyle: BindingParser<Dynamic<NSTableView.SelectionHighlightStyle>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectionHighlightStyle(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var stronglyReferencesItems: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .stronglyReferencesItems(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var treeData: BindingParser<Dynamic<TreeAnimation<Downcast.NodeDataType>>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .treeData(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var userInterfaceLayoutDirection: BindingParser<Dynamic<NSUserInterfaceLayoutDirection>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .userInterfaceLayoutDirection(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var usesAlternatingRowBackgroundColors: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .usesAlternatingRowBackgroundColors(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var verticalMotionCanBeginDrag: BindingParser<Dynamic<Bool>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .verticalMotionCanBeginDrag(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	
	// 2. Signal bindings are performed on the object after construction.
	public static var collapseIndexPath: BindingParser<Signal<(indexPath: IndexPath?, collapseChildren: Bool)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .collapseIndexPath(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var deselectAll: BindingParser<Signal<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .deselectAll(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var deselectColumn: BindingParser<Signal<NSUserInterfaceItemIdentifier>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .deselectColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var deselectIndexPath: BindingParser<Signal<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .deselectIndexPath(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var expandIndexPath: BindingParser<Signal<(indexPath: IndexPath?, expandChildren: Bool)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .expandIndexPath(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var hideRowActions: BindingParser<Signal<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .hideRowActions(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var hideRows: BindingParser<Signal<(indexes: IndexSet, withAnimation: NSTableView.AnimationOptions)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .hideRows(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var highlightColumn: BindingParser<Signal<NSUserInterfaceItemIdentifier?>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .highlightColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var moveColumn: BindingParser<Signal<(identifier: NSUserInterfaceItemIdentifier, toIndex: Int)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .moveColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var scrollColumnToVisible: BindingParser<Signal<NSUserInterfaceItemIdentifier>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .scrollColumnToVisible(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var scrollIndexPathToVisible: BindingParser<Signal<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .scrollIndexPathToVisible(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectAll: BindingParser<Signal<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectAll(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectColumns: BindingParser<Signal<(identifiers: Set<NSUserInterfaceItemIdentifier>, byExtendingSelection: Bool)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectColumns(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectIndexPaths: BindingParser<Signal<(indexPaths: Set<IndexPath>, byExtendingSelection: Bool)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectIndexPaths(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var setDropIndexPath: BindingParser<Signal<(indexPath: IndexPath?, dropChildIndex: Int)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .setDropIndexPath(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var sizeLastColumnToFit: BindingParser<Signal<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .sizeLastColumnToFit(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var sizeToFit: BindingParser<Signal<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .sizeToFit(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var unhideRows: BindingParser<Signal<(indexes: IndexSet, withAnimation: NSTableView.AnimationOptions)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .unhideRows(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	
	// 3. Action bindings are triggered by the object after construction.
	public static var columnMoved: BindingParser<SignalInput<(column: NSUserInterfaceItemIdentifier, oldIndex: Int, newIndex: Int)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .columnMoved(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var columnResized: BindingParser<SignalInput<(column: NSUserInterfaceItemIdentifier, oldWidth: CGFloat, newWidth: CGFloat)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .columnResized(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var doubleAction: BindingParser<TargetAction, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .doubleAction(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectionChanged: BindingParser<SignalInput<(selectedColumns: Set<NSUserInterfaceItemIdentifier>, selectedIndexPaths: Set<IndexPath>)>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectionChanged(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectionIsChanging: BindingParser<SignalInput<Void>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectionIsChanging(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indexPathDidCollapse: BindingParser<SignalInput<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indexPathDidCollapse(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indexPathDidExpand: BindingParser<SignalInput<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indexPathDidExpand(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indexPathWillCollapse: BindingParser<SignalInput<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indexPathWillCollapse(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var indexPathWillExpand: BindingParser<SignalInput<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .indexPathWillExpand(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var visibleIndexPathsChanged: BindingParser<SignalInput<Set<IndexPath>>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .visibleIndexPathsChanged(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	
	// 4. Delegate bindings require synchronous evaluation within the object's context.
	public static var acceptDrop: BindingParser<(_ outlineView: NSOutlineView, _ info: NSDraggingInfo, _ indexPath: IndexPath?, _ childIndex: Int) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .acceptDrop(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var didClickTableColumn: BindingParser<(NSOutlineView, NSTableColumn) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .didClickTableColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var didDragTableColumn: BindingParser<(NSOutlineView, NSTableColumn) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .didDragTableColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var draggingSessionEnded: BindingParser<(_ outlineView: NSOutlineView, _ draggingSession: NSDraggingSession, _ endedAt: NSPoint, _ operation: NSDragOperation) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .draggingSessionEnded(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var draggingSessionWillBegin: BindingParser<(_ outlineView: NSOutlineView, _ draggingSession: NSDraggingSession, _ willBeginAt: NSPoint, _ forItems: [IndexPath]) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .draggingSessionWillBegin(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var groupRowCellConstructor: BindingParser<(Int) -> TableCellViewConvertible, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .groupRowCellConstructor(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var heightOfRow: BindingParser<(NSOutlineView, _ indexPath: IndexPath) -> CGFloat, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .heightOfRow(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var isIndexPathExpandable: BindingParser<(_ outlineView: NSOutlineView, IndexPath) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .isIndexPathExpandable(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var mouseDownInHeaderOfTableColumn: BindingParser<(NSOutlineView, NSTableColumn) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .mouseDownInHeaderOfTableColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var nextTypeSelectMatch: BindingParser<(_ outlineView: NSOutlineView, _ from: IndexPath, _ to: IndexPath, _ for: String) -> IndexPath?, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .nextTypeSelectMatch(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var pasteboardWriter: BindingParser<(_ outlineView: NSOutlineView, _ forIndexPath: IndexPath) -> NSPasteboardWriting?, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .pasteboardWriter(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var rowView: BindingParser<(_ outlineView: NSOutlineView, _ indexPath: IndexPath) -> TableRowViewConvertible?, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .rowView(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectionIndexesForProposedSelection: BindingParser<(_ outlineView: NSOutlineView, _ proposedSelectionIndexes: Set<IndexPath>) -> Set<IndexPath>, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectionIndexesForProposedSelection(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var selectionShouldChange: BindingParser<(_ outlineView: NSOutlineView) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .selectionShouldChange(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldCollapse: BindingParser<(_ outlineView: NSOutlineView, _ indexPath: IndexPath) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldCollapse(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldExpand: BindingParser<(_ outlineView: NSOutlineView, _ indexPath: IndexPath) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldExpand(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldReorderColumn: BindingParser<(_ outlineView: NSOutlineView, _ column: NSTableColumn, _ newIndex: Int) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldReorderColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldSelectIndexPath: BindingParser<(_ outlineView: NSOutlineView, _ indexPath: IndexPath) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldSelectIndexPath(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldSelectTableColumn: BindingParser<(_ outlineView: NSOutlineView, _ column: NSTableColumn?) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldSelectTableColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var shouldTypeSelectForEvent: BindingParser<(_ outlineView: NSOutlineView, _ event: NSEvent, _ searchString: String?) -> Bool, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .shouldTypeSelectForEvent(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var sizeToFitWidthOfColumn: BindingParser<(_ outlineView: NSOutlineView, _ column: NSTableColumn) -> CGFloat, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .sizeToFitWidthOfColumn(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var sortDescriptorsDidChange: BindingParser<(NSOutlineView, [NSSortDescriptor]) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .sortDescriptorsDidChange(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var typeSelectString: BindingParser<(_ outlineView: NSOutlineView, _ column: NSTableColumn?, _ indexPath: IndexPath) -> String?, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .typeSelectString(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var updateDraggingItems: BindingParser<(_ outlineView: NSOutlineView, _ forDrag: NSDraggingInfo) -> Void, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .updateDraggingItems(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
	public static var validateDrop: BindingParser<(_ outlineView: NSOutlineView, _ info: NSDraggingInfo, _ proposedIndexPath: IndexPath?, _ proposedChildIndex: Int) -> NSDragOperation, OutlineView<Downcast.NodeDataType>.Binding, Downcast> { return .init(extract: { if case .validateDrop(let x) = $0 { return x } else { return nil } }, upcast: { $0.asOutlineViewBinding() }) }
}

#endif
